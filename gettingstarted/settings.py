"""
Django settings for gettingstarted project.

Generated by 'django-admin startproject' using Django 2.0.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

from graphql_auth.models import UserStatus
import os
from datetime import timedelta

import django_heroku

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

SECRET_KEY = os.environ["DJANGO_SECRET_KEY"]

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ["DJANGO_DEBUG"] == "True"

ALLOWED_HOSTS: list[str] = os.environ["ALLOWED_HOSTS"].split(',')


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "hello",
    "graphene_django",
    'corsheaders',
    'graphql_jwt.refresh_token.apps.RefreshTokenConfig',
    'graphql_auth',
    'django_filters',
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

AUTHENTICATION_BACKENDS = [
    'graphql_auth.backends.GraphQLAuthBackend',
    'django.contrib.auth.backends.ModelBackend',
]

GRAPHQL_JWT = {
    "JWT_VERIFY_EXPIRATION": True,
    "JWT_LONG_RUNNING_REFRESH_TOKEN": True,
    "JWT_ALLOW_ANY_CLASSES": [
        "graphql_auth.mutations.Register",
        "graphql_auth.mutations.VerifyAccount",
    ],
    "JWT_EXPIRATION_DELTA": timedelta(days=365000),
    "JWT_REFRESH_EXPIRATION_DELTA": timedelta(days=365000),
}

ROOT_URLCONF = "gettingstarted.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ]
        },
    }
]

WSGI_APPLICATION = "gettingstarted.wsgi.application"


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": os.path.join(BASE_DIR, "db.sqlite3")
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATIC_URL = "/static/"

django_heroku.settings(locals())

GRAPHENE = {
    "SCHEMA": "hello.schema.schema"
}

LOGGING = {
    'version': 1,
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        }
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
        }
    },
    'loggers': {
        'django.db.backends': {
            'level': 'DEBUG',
            'handlers': ['console'],
        },
        'testlogger': {
            'handlers': ['console'],
            'level': 'INFO',
        }
    }
}

# EMAIL_BACKEND = 'gettingstarted.mailgun.django_mailgun.MailgunBackend'

# MAILGUN_API_KEY = os.environ['MAILGUN_API_KEY']
# MAILGUN_DOMAIN = os.environ['MAILGUN_DOMAIN']
# MAILGUN_PUBLIC_KEY = os.environ['MAILGUN_PUBLIC_KEY']
# MAILGUN_SMTP_LOGIN = os.environ['MAILGUN_SMTP_LOGIN']
# MAILGUN_SMTP_PASSWORD = os.environ['MAILGUN_SMTP_PASSWORD']
# MAILGUN_SMTP_PORT = os.environ['MAILGUN_SMTP_PORT']
# MAILGUN_SMTP_SERVER = os.environ['MAILGUN_SMTP_SERVER']

# MAILGUN_ACCESS_KEY = MAILGUN_API_KEY
# MAILGUN_SERVER_NAME = MAILGUN_SMTP_SERVER
# EMAIL_FROM = MAILGUN_SMTP_LOGIN

# EMAIL_HOST = MAILGUN_SMTP_LOGIN.split('@')[1]
# EMAIL_PORT = 587
# EMAIL_HOST_USER = MAILGUN_SMTP_LOGIN.split('@')[0]
# EMAIL_HOST_PASSWORD = MAILGUN_SMTP_PASSWORD
# EMAIL_USE_TLS = True

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.environ['MAILGUN_SMTP_SERVER']
EMAIL_PORT = os.environ['MAILGUN_SMTP_PORT']
EMAIL_HOST_USER = os.environ['MAILGUN_SMTP_LOGIN']
EMAIL_HOST_PASSWORD = os.environ['MAILGUN_SMTP_PASSWORD']
EMAIL_USE_TLS = True


old_get_email_context = UserStatus.get_email_context


def new_get_email_context(self, info, path, action, **kwargs):
    values = old_get_email_context(self, info, path, action, **kwargs)
    import logging
    logger = logging.getLogger('testlogger')
    logger.info('Values returned: ' + repr(values))
    return values


UserStatus.get_email_context = new_get_email_context
